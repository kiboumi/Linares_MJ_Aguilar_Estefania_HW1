(() => {
    const characterBox = document.querySelector("#character-box");
    const filmTemplate = document.querySelector("#film-template");
    const filmCon = document.querySelector("#film-con");

    const baseURL = `https://swapi.dev/api/`;

    let spinner = `
  <?xml version="1.0" encoding="utf-8"?>
    <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" style="margin: auto; background: none; display: block; shape-rendering: auto;" width="200px" height="200px" viewBox="0 0 100 100" preserveAspectRatio="xMidYMid">
    <g transform="translate(80,50)">
    <g transform="rotate(0)">
    <circle cx="0" cy="0" r="6" fill="#fbbc42" fill-opacity="1">
      <animateTransform attributeName="transform" type="scale" begin="-0.875s" values="1.5 1.5;1 1" keyTimes="0;1" dur="1s" repeatCount="indefinite"></animateTransform>
      <animate attributeName="fill-opacity" keyTimes="0;1" dur="1s" repeatCount="indefinite" values="1;0" begin="-0.875s"></animate>
    </circle>
    </g>
    </g><g transform="translate(71.21320343559643,71.21320343559643)">
    <g transform="rotate(45)">
    <circle cx="0" cy="0" r="6" fill="#fbbc42" fill-opacity="0.875">
      <animateTransform attributeName="transform" type="scale" begin="-0.75s" values="1.5 1.5;1 1" keyTimes="0;1" dur="1s" repeatCount="indefinite"></animateTransform>
      <animate attributeName="fill-opacity" keyTimes="0;1" dur="1s" repeatCount="indefinite" values="1;0" begin="-0.75s"></animate>
    </circle>
    </g>
    </g><g transform="translate(50,80)">
    <g transform="rotate(90)">
    <circle cx="0" cy="0" r="6" fill="#fbbc42" fill-opacity="0.75">
      <animateTransform attributeName="transform" type="scale" begin="-0.625s" values="1.5 1.5;1 1" keyTimes="0;1" dur="1s" repeatCount="indefinite"></animateTransform>
      <animate attributeName="fill-opacity" keyTimes="0;1" dur="1s" repeatCount="indefinite" values="1;0" begin="-0.625s"></animate>
    </circle>
    </g>
    </g><g transform="translate(28.786796564403577,71.21320343559643)">
    <g transform="rotate(135)">
    <circle cx="0" cy="0" r="6" fill="#fbbc42" fill-opacity="0.625">
      <animateTransform attributeName="transform" type="scale" begin="-0.5s" values="1.5 1.5;1 1" keyTimes="0;1" dur="1s" repeatCount="indefinite"></animateTransform>
      <animate attributeName="fill-opacity" keyTimes="0;1" dur="1s" repeatCount="indefinite" values="1;0" begin="-0.5s"></animate>
    </circle>
    </g>
    </g><g transform="translate(20,50.00000000000001)">
    <g transform="rotate(180)">
    <circle cx="0" cy="0" r="6" fill="#fbbc42" fill-opacity="0.5">
      <animateTransform attributeName="transform" type="scale" begin="-0.375s" values="1.5 1.5;1 1" keyTimes="0;1" dur="1s" repeatCount="indefinite"></animateTransform>
      <animate attributeName="fill-opacity" keyTimes="0;1" dur="1s" repeatCount="indefinite" values="1;0" begin="-0.375s"></animate>
    </circle>
    </g>
    </g><g transform="translate(28.78679656440357,28.786796564403577)">
    <g transform="rotate(225)">
    <circle cx="0" cy="0" r="6" fill="#fbbc42" fill-opacity="0.375">
      <animateTransform attributeName="transform" type="scale" begin="-0.25s" values="1.5 1.5;1 1" keyTimes="0;1" dur="1s" repeatCount="indefinite"></animateTransform>
      <animate attributeName="fill-opacity" keyTimes="0;1" dur="1s" repeatCount="indefinite" values="1;0" begin="-0.25s"></animate>
    </circle>
    </g>
    </g><g transform="translate(49.99999999999999,20)">
    <g transform="rotate(270)">
    <circle cx="0" cy="0" r="6" fill="#fbbc42" fill-opacity="0.25">
      <animateTransform attributeName="transform" type="scale" begin="-0.125s" values="1.5 1.5;1 1" keyTimes="0;1" dur="1s" repeatCount="indefinite"></animateTransform>
      <animate attributeName="fill-opacity" keyTimes="0;1" dur="1s" repeatCount="indefinite" values="1;0" begin="-0.125s"></animate>
    </circle>
    </g>
    </g><g transform="translate(71.21320343559643,28.78679656440357)">
    <g transform="rotate(315)">
    <circle cx="0" cy="0" r="6" fill="#fbbc42" fill-opacity="0.125">
      <animateTransform attributeName="transform" type="scale" begin="0s" values="1.5 1.5;1 1" keyTimes="0;1" dur="1s" repeatCount="indefinite"></animateTransform>
      <animate attributeName="fill-opacity" keyTimes="0;1" dur="1s" repeatCount="indefinite" values="1;0" begin="0s"></animate>
    </circle>
    </g>
    </g>
    <!-- [ldio] generated by https://loading.io/ --></svg>
  `;

    function getCharacters() {
                            // page 2 of 82
        fetch (`${baseURL}people?page=2`)
        .then(response => response.json())
        .then(function(response){
            const character = response.results;
            const ul = document.createElement('ul');

            character.forEach(character => {
                const li = document.createElement('li'); 
                const a = document.createElement('a');
                a.textContent = character['name'];
                a.dataset.films = character.films[0];
                li.appendChild(a);
                ul.appendChild(li);          
             });

             characterBox.appendChild(ul);
        })
        .then(function(){
            const links = document.querySelectorAll('#character-box li a');
            links.forEach(link => {
                link.addEventListener("click", getFilm);
            })
        })
        .catch(error => {
            console.log(error);
        });
        }

        function getFilm(e) {
          spinnerSection.innerHTML = spinner;
            const filmID = this.dataset.films;
            fetch(`${filmID}`)
            .then(response => response.json())
            .then(function(response){
                filmCon.innerHTML = "";

                console.log(response.title);
                const template = document.importNode(filmTemplate.content, true);

                const reviewTitle = template.querySelector(".film-title");
                const reviewImage = template.querySelector(".film-image");
                const reviewEpisode = template.querySelector(".film-episode");
                const reviewDescription = template.querySelector(".film-description");


                reviewTitle.innerHTML = response.title;
                reviewImage.src = `images/${response.episode_id}.jpg`;
                reviewEpisode.innerHTML = "Episode " + response.episode_id;
                reviewDescription.innerHTML = response.opening_crawl;

                filmCon.appendChild(template);
                reviewEpisode.appendChild(template);
                reviewDescription.appendChild(template);
                spinnerSection.innerHTML = "";

            })

            .catch(error => {
                console.log(error);
            })

        }
        

    getCharacters();


    gsap.fromTo(
        ".loading-page",
        { opacity: 1 },
        {
          opacity: 0,
          display: "none",
          duration: 1.5,
          delay: 3.5,
        }
      );
      
      gsap.fromTo(
        ".logo-name",
        {
          y: 50,
          opacity: 0,
        },
        {
          y: 0,
          opacity: 1,
          duration: 2,
          delay: 0.5,
        }
      );
      
 
})();


  